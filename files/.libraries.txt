
Why use libraries?
	A library is essentially a collection of object files stored on a single file. You use libraries because it's more convenient to keep object files stored together in batches. For example, it'd be easier to compile a program that requires 100 or 1000 functions if all those functions are kept in a single library file, which you might use in your own program like this:

gcc your_program.c -L. -lholberton -o program.exe 

In that example, the . after the -L flag means "look in the current directory for the library", and the holberton after the -l flag means "look for a library file named libholberton.a".
	
	If you want others to use your functions (or if you'd like to use other people's functions), then you'll need to give them the object files that your functions compiled into, and it's be easiest to do that if your object files are all together.

How static libraries work?

Static vs Dynamic
	Most modern systems, including unix, allow us to use two types of libraries, static and dynamic. The difference between the two, is that static libraries are compiled into the program's executable, whereas dynamic libraries are not compiled into the program's executable, and are instead loaded into memory at runtime.

	<paint_picture>

	As you can see, the executable created using a static library contains a copy of the library, which makes the executable larger but also alleviates dependency hell, which is when your program relies on dependencies that are no longer available, or have been renamed, and things of that nature. You're protected from dependency hell with static libraries because a copy is compiled into the executable, but this also means that when you make a major change to the static library all of programs that need to see that change will need to be recompiled, whereas with a dynamic library you can just recompile the library once and then the reliant programs will see the change without needing to be recompiled themselves. 

Header Files and Prototypes?
	Including header files typically only includes function prototypes, 
	so for example this:
	<> 
	might be equivalent to this: 
	<>
	Which is useful, but those functions are undefined until our program has access to the actual function definitions. 
	<custom_c>

To make these available to our program, we should first compile our 100's of functions into objects using this command:
	gcc -c *.c
Which results in 100's of object files like so:
	<custom_c/tmp>
	(As you can see, I've also moved the resulting object files into a tmp directory to keep things organized)
And then pack the objects into a static library with this command.
	ar rc libholberton.a *.o
Which gives us this:
	<>

Using static libraries: Does order matter?
	Yes! The order in which objects are added to the executable matters. Let's say you're in a situation like this:
		<gcc obj1 obj2 liba libb obj3>
You've compiled everything into an object and now you want to make the executable. Perhaps your main program is obj1, perhaps obj2 is a helper function, so on and so forth. One function may rely on another one to work. For example, this "left_arm" function relies on "_putchar":
		<left_arm.c> arrows at putchar usage
Luckily, _putchar is in our library, so left_arm will work properly so long as the library is compiled into the executable, right? That's half right; the required libraries must come after the objects that require them.
		<command line gcc with arrows>
The linker evaluates the list of inputs left to right and it only includes needed library objects. So it needs to see the object which requires library functions, before it sees the library containing those functions, so that it knows what to grab.
		< left_arm.o -> diagram (blue _putchar, gray _strlen)>
So if the library came before the object that needed it, then the needed library objects may be passed over during compilation. So this minor change would be cause an error:
				<commandline>
				< diagram -> use_right_arm.o (red) >
You can also index your libraries, which makes compilation faster, using this command:
	ranlib <library name>

Summary of static libraries
How to create them?
	gcc -c <c filenames>
	ar rc <library filename> <object filenames>
	ranlib <library filename> //italics
How to use them?
	gcc <program to compile> -L<directory> -l<library name> -o <executable filename>
	<explain -L and -l >